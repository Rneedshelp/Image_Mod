// open_test.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include<iostream>
#include <string>
#include <locale>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/opencv.hpp>

using namespace std;
using namespace cv;

void Menu(){

}

Mat Rotate(Mat img) {
	int degree = 0;
	cout << "By how many degrees do you want image rotated? ";
	cin >> degree;

	Point2f center(float((img.cols) / 2.0), float((img.rows) / 2.0));
	Mat rot = getRotationMatrix2D(center, degree, 1.0);
	cv::warpAffine(img, img, rot, img.size());
	namedWindow("Rotated_image", WINDOW_NORMAL);
	resizeWindow("image", img.size());
	imshow("image", img);


	waitKey(); //wait for any key press

	return img;
}


Mat Sketch(Mat img) {
	Mat greyimg;
	Mat blurimg;
	Mat invertimg;
	Mat finalimg;


	cvtColor(img, greyimg, COLOR_BGR2GRAY);

	//invert
	invertimg = 255 - greyimg;

	//blur
	GaussianBlur(invertimg, invertimg, Size(21, 21), 0);

	//dodge
	divide(greyimg, 255 - invertimg, finalimg, 256.0);



	namedWindow("image", WINDOW_NORMAL);
	namedWindow("sketch", WINDOW_NORMAL);

	imshow("image", img);
	imshow("sketch", finalimg);

	waitKey(0);


	/*
	cvtColor(img, greyimg, COLOR_RGB2GRAY); //greyscale
	invertimg = 255 - greyimg;
	blur(invertimg,blurimg,Size(21,21),Point(-10,-10));
	finalimg = (blurimg * 255) / (255 - greyimg);

  	divide(blurimg, 255 - greyimg, finalimg, 255);
 
	pencilSketch(img,greyimg,finalimg, 60.0, 0.07,0.05);
	stylization(finalimg, finalimg, 60, 0.7);
	cvtColor(finalimg,finalimg, COLOR_RGB2GRAY); //greyscale

	*/

	//namedWindow("image", WINDOW_NORMAL);
	//imshow("image", finalimg);
	//waitKey(); //wait for any key press
	//imwrite("G14.jpg", img);


	return img;

}


Mat Mirror(Mat img){
	flip(img, img, +1);
	namedWindow("image", WINDOW_NORMAL);
	imshow("image", img);
	waitKey(); //wait for any key press
	return img;
}


Mat Deepfry(Mat img) {

	GaussianBlur(img,img, Size(21, 21), 0); //blur
	double alpha = 2.0; //1.0 - 3.0
	int beta = 20; //0-100
	GaussianBlur(img, img, cv::Size(0, 0), 3);
	cv::addWeighted(img, 3, img, -0.5, 0, img);

	cout << "Enter Beta and Alpha values please:\nBeta(0-100):";
	cin >> beta;
	cout << "\nAlpha(1.0 - 3.0): ";
	cin >> alpha;
	

	for (int r = 0; r < img.rows; r++) {
		for (int c = 0; c < img.cols; c++) {
			for (int y = 0; y < img.channels(); y++) {
				img.at<Vec3b>(r,c)[y] =
					saturate_cast<uchar>(alpha*img.at<Vec3b>(r,c)[y] + beta);
			}
		}
	}

	cvtColor(img, img, COLOR_RGB2HSV_FULL);

	
	namedWindow("image", WINDOW_NORMAL);
	imshow("image", img);
	waitKey(); //wait for any key press
	return img;

}

Mat Filter(Mat img) {
	flip(img, img, +1);
	namedWindow("image", WINDOW_NORMAL);
	imshow("image", img);
	waitKey(); //wait for any key press
	return img;
}

Mat save(Mat img)
{
	int selection;

	cout << "Do you want to edit an image? \n";
	cout << "YES (1)\nNO(0)\n";
	cin >> selection;
	if (selection == 1)
	{

	}
	else
	{

	}


	return img;
}

int main()
{
	char choice;
	int type;
	char file[256];

	string image;
		cout << "What is the name of the file you wish to edit?: \n";
		std::cin.getline(file, 256);

		do {
		cout << "\n What type of file is the image? \n";
		cout << "Enter the number corresponsding to the type:\n";
		cout << "(1) JPG \n";
		cout << "(2) PNG \n";
		cout << "(3) GIF \n";
		cout << "(4) BMP \n";
		cout << "(0) Cancel and Exit \n";
		cin >> type;
		switch (type) {
		case 1:
			image = string(file) + ".JPG";
			type = 0;
			break;
		case 2:
			image = string(file) + ".png";
			type = 0;
			break;
		case 3:
			image = string(file) + ".gif";
			type = 0;
			break;
		case 4:
			image = string(file) + ".bmp";
			type = 0;
			break;
		case 0:
			break;
		default:
			cout << "Error: input was not identified \n\n";
			break;
		}

		} while (type != 0);



		Mat img = imread(image);
		if (img.empty())
		{
			cout << "Could not open or find the image " << image << endl;
			cin.get(); //wait for any key press
			waitKey();
			return -1;
		}
		//add loop here for type, if found continue, else start from beginning


		char task;
		do {
		cout << "\n What do you want to do with this image? \n";
		cout << "Enter the number corresponsding to the type:\n";
		cout << "(1) Rotate it\n";
		cout << "(2) Sketch it \n";
		cout << "(3) Mirror it \n";
		cout << "(4) Deep Fry it \n";
		cout << "(5) Filter it \n";
		cout << "(0) Nothing/Exit \n";
		cin >> task;
		switch (task) {
		case '1':
			Rotate(img);
			break;
		case '2':
			Sketch(img);
			break;
		case '3':
			Mirror(img);
			break;
		case '4':
			Deepfry(img);
			break;
		case '5':
			Filter(img);
			break;
		case '0':
			waitKey();
			return -1;
			break;
		default:
			cout << "Could not register the input! Try Again \n";
			break;

		}
		} while (task != 0);
		/*else {
				namedWindow("image", WINDOW_NORMAL);
			imshow("image", img);
			waitKey();
			return -1;
		}*/
	//save();
	return 0;
}
